/* eslint-disable @typescript-eslint/no-explicit-any */
import { useEffect, useState } from 'react'
import { useSelector } from 'react-redux'
import { Checkbox, Col, Divider, notification, Row } from 'antd'
import { LoadingOutlined } from '@ant-design/icons'
import pdfMake from 'pdfmake/build/pdfmake'
import pdfFonts from 'pdfmake/build/vfs_fonts'

pdfMake.vfs = pdfFonts.pdfMake.vfs

import {
  Button,
  ButtonsContainer,
  CheckboxContainer,
  CheckboxRow,
  Embed,
  Loader,
  PreviewObject,
  PreviewTitle,
} from './styles'
import {
  getAppointmentDetailsDocumentTemplate,
  IAppointmentDetailsTemplateData,
} from './template'
import { RootState } from '../../../store'
import { IMyAppointment } from '../../../interfaces/appointment'
import { getTimePassed } from '../../../utils/helpers/formatters'

type TPDFDataListProps =
  | 'name'
  | 'birthdate'
  | 'age'
  | 'email'
  | 'primary_phone'
  | 'datetime'
  | 'updated_at'
  | 'is_follow_up'
  | 'insurance_name'
  | 'payment_method'
  | 'exam_request'
  | 'notes'
  | 'signature_field'
  | 'prescription'

interface ICheckboxOption {
  label: string
  value: TPDFDataListProps
}

interface IAppointmentDetailsDocumentProps {
  /** @default true */
  showPreview?: boolean
  /** @default true */
  autoGenerateDocument?: boolean
  /** @default true */
  showDownloadButton?: boolean
  /** @default false */
  showCreateButton?: boolean
  appointment?: IMyAppointment
}

const LoadingIcon = (
  <LoadingOutlined style={{ marginLeft: 10, fontSize: 16 }} spin />
)
const initialPDFDataList: TPDFDataListProps[] = [
  'name',
  'birthdate',
  'age',
  'datetime',
  'insurance_name',
  'exam_request',
  'prescription',
  'notes',
  'signature_field',
]
const checkboxOptions: ICheckboxOption[] = [
  { label: 'Nome do Paciente', value: 'name' },
  { label: 'Data de Nascimento', value: 'birthdate' },
  { label: 'Idade', value: 'age' },
  { label: 'Email', value: 'email' },
  { label: 'Telefone', value: 'primary_phone' },
  { label: 'Data da Consulta', value: 'datetime' },
  { label: 'Data da Última Atualização', value: 'updated_at' },
  { label: 'Retorno', value: 'is_follow_up' },
  { label: 'Convênio/Particular', value: 'insurance_name' },
  { label: 'Método de Pagamento', value: 'payment_method' },
  { label: 'Pedido de Exame(s)', value: 'exam_request' },
  { label: 'Prescrição de Medicamento(s)', value: 'prescription' },
  { label: 'Anotações', value: 'notes' },
  { label: 'Linha de Assinatura (Médico)', value: 'signature_field' },
]

export const AppointmentDetailsDocument = ({
  showDownloadButton = true,
  showCreateButton = false,
  showPreview = true,
  autoGenerateDocument = true,
  appointment,
}: IAppointmentDetailsDocumentProps) => {
  const user = useSelector((state: RootState) => state.AuthReducer)
  const [PDFDataList, setPDFDataList] =
    useState<TPDFDataListProps[]>(initialPDFDataList)
  const [url, setUrl] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [base64Document, setBase64Document] = useState<string | null>(null)

  const createPDF = (definition: IAppointmentDetailsTemplateData) => {
    try {
      const pdfDocGenerator = pdfMake.createPdf(
        getAppointmentDetailsDocumentTemplate(definition) as any
      )

      pdfDocGenerator.getBlob((blob: Blob) => setUrl(URL.createObjectURL(blob)))
      pdfDocGenerator.getDataUrl((base64: string) => setBase64Document(base64))
    } catch (err) {
      notification.error({
        message:
          'Desculpe, mas ocorreu um erro ao gerar o arquivo PDF! Por favor, tente novamente mais tarde ou entre em contato!',
      })
    }
  }

  const downloadFile = () => {
    if (!base64Document) {
      return notification.error({ message: 'Não há arquivo para ser baixado!' })
    }

    try {
      setIsLoading(true)

      const linkEl = document.createElement('a')
      const now = new Date()
      const fileName = `Consulta_${
        appointment?.patient_name?.split(' ')?.[0]
      }_${now.toISOString().split('T')[0]}_${now.getTime()}.pdf`

      linkEl.setAttribute('href', base64Document)
      linkEl.setAttribute('download', fileName)
      linkEl.click()
    } catch (err) {
      notification.error({
        message:
          'Desculpe, mas ocorreu um erro ao baixar o arquivo PDF! Por favor, tente novamente mais tarde ou entre em contato!',
      })
    } finally {
      setIsLoading(false)
    }
  }

  const getCreateDocumentBtnTitle = () => {
    if (isLoading) {
      return 'Aguarde o download do documento para poder gerar outro'
    }

    if (!PDFDataList?.length) {
      return 'Selecione pelo menos um campo para poder gerar um documento PDF'
    }

    return 'Clique para gerar um documento PDF com as informações desta consulta'
  }

  const mapDocDefinition = (list: TPDFDataListProps[]) => {
    return {
      doctor_name: user?.data?.name,
      doctor_crm: user?.data?.doctor?.crm_document,
      patient_name: list?.includes('name')
        ? appointment?.patient_name || 'Não identificado'
        : undefined,
      birthdate: list?.includes('birthdate')
        ? appointment?.patient?.birthdate
          ? new Date(appointment?.patient?.birthdate).toLocaleDateString()
          : 'Não identificado'
        : undefined,
      age: list?.includes('age')
        ? appointment?.patient?.birthdate
          ? getTimePassed(appointment.patient.birthdate) || undefined
          : undefined
        : undefined,
      email: list?.includes('email') ? appointment?.patient?.email : undefined,
      primary_phone: list?.includes('primary_phone')
        ? appointment?.patient?.primary_phone || 'Não identificado'
        : undefined,
      datetime: list?.includes('datetime')
        ? appointment?.datetime
          ? new Date(appointment.datetime).toLocaleString()
          : 'Não identificado'
        : undefined,
      updated_at: list?.includes('updated_at')
        ? appointment?.updated_at
          ? new Date(appointment.updated_at).toLocaleString()
          : 'Não identificado'
        : undefined,
      is_follow_up: list?.includes('is_follow_up')
        ? appointment?.is_follow_up
          ? 'Sim'
          : 'Não'
        : undefined,
      insurance_name: list?.includes('insurance_name')
        ? appointment?.insurance_name || 'Nenhum (consulta particular)'
        : undefined,
      exam_request: list?.includes('exam_request')
        ? appointment?.exam_request || 'Não fornecido'
        : undefined,
      notes: list?.includes('notes')
        ? appointment?.notes || 'Não fornecido'
        : undefined,
      signature_field: list?.includes('signature_field'),
      payment_method_name: list?.includes('payment_method')
        ? appointment?.payment_method?.name || 'Não informado'
        : undefined,
      prescription: list?.includes('prescription')
        ? appointment?.prescription || 'Nenhuma'
        : undefined,
    }
  }

  useEffect(() => {
    if (autoGenerateDocument) {
      createPDF(mapDocDefinition(initialPDFDataList))
    }
  }, [])

  useEffect(() => {
    return () => {
      if (url !== null) {
        URL.revokeObjectURL(url)
      }
    }
  }, [url])

  return (
    <>
      {checkboxOptions?.map(({ value, label }) => {
        const isChecked = PDFDataList.includes(value)

        return (
          <CheckboxContainer key={value}>
            <Row>
              <Col>
                <CheckboxRow>
                  <Col>
                    <Checkbox
                      onChange={() => {
                        const updatedDataList = isChecked
                          ? [...PDFDataList].filter((item) => item !== value)
                          : [...PDFDataList, value]
                        const definition = mapDocDefinition(updatedDataList)

                        setPDFDataList(updatedDataList)

                        if (autoGenerateDocument) {
                          createPDF(definition)
                        }
                      }}
                      value={isChecked}
                      checked={isChecked}>
                      {label}
                    </Checkbox>
                  </Col>
                </CheckboxRow>
              </Col>
            </Row>
          </CheckboxContainer>
        )
      })}

      {!!url && !!showPreview && (
        <>
          <Divider />
          <PreviewTitle>Prévia</PreviewTitle>
          <PreviewObject data={url} type="application/pdf">
            <Embed src={url} type="application/pdf" />
          </PreviewObject>
        </>
      )}

      {(!!showCreateButton || !!showDownloadButton) && (
        <ButtonsContainer>
          <Row gutter={12}>
            {!!showCreateButton && (
              <Col>
                <Button
                  type="button"
                  color="new"
                  title={getCreateDocumentBtnTitle()}
                  disabled={isLoading || !PDFDataList?.length}
                  onClick={() =>
                    createPDF(mapDocDefinition(initialPDFDataList))
                  }>
                  Gerar Documento
                </Button>
              </Col>
            )}

            {!!showDownloadButton && (
              <Col>
                <Button
                  type="button"
                  title={
                    url
                      ? 'Clique para baixar o arquivo PDF gerado'
                      : 'Você precisa primeiro gerar um arquivo PDF'
                  }
                  disabled={!url || isLoading}
                  onClick={downloadFile}>
                  {isLoading ? (
                    <>
                      Downloading
                      <Loader
                        indicator={LoadingIcon}
                        style={{ color: '#fff' }}
                      />
                    </>
                  ) : (
                    'Download'
                  )}
                </Button>
              </Col>
            )}
          </Row>
        </ButtonsContainer>
      )}
    </>
  )
}
